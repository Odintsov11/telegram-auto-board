// üìÑ backend/src/bot/index.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º)
import { Bot } from 'grammy'
import { config } from '../utils/config'
import { logger } from '../utils/logger'

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞
export const bot = new Bot(config.BOT_TOKEN)

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  try {
    const user = ctx.from
    if (!user) return

    logger.info(`User started bot: ${user.id} (${user.username})`)

    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üöó –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
          web_app: { url: config.WEBAPP_URL }
        }
      ]]
    }

    await ctx.reply(
      `üöó <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–≤—Ç–æ –î–æ—Å–∫—É!</b>

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.

‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ
‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`,
      {
        parse_mode: 'HTML',
        reply_markup: keyboard
      }
    )
  } catch (error) {
    logger.error('Start command error:', error)
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
bot.on('message:web_app_data', async (ctx) => {
  try {
    const data = JSON.parse(ctx.message.web_app_data.data)
    logger.info('Received WebApp data:', data)

    await ctx.reply('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –û–±—Ä–∞–±–æ—Ç–∫–∞...')
  } catch (error) {
    logger.error('WebApp data error:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö')
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  logger.error('Bot error:', err)
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
export async function startBot() {
  try {
    logger.info('Starting Telegram bot...')
    
    await bot.api.setMyCommands([
      { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' }
    ])

    await bot.start()
    logger.info('Bot started successfully')
  } catch (error) {
    logger.error('Failed to start bot:', error)
    process.exit(1)
  }
}

// Graceful shutdown
process.once('SIGINT', () => {
  logger.info('Received SIGINT, stopping bot...')
  bot.stop()
})

process.once('SIGTERM', () => {
  logger.info('Received SIGTERM, stopping bot...')
  bot.stop()
})